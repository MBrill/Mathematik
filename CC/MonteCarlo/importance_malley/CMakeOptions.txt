# --------------------------------------------------------------------------
# $File$
# $Revision$
# $Date$
# --------------------------------------------------------------------------
# Optionen für cmake-Projekte mit MathPack

# Makefiles  mit mehr Ausgabe
set(CMAKE_VERBOSE_MAKEFILE TRUE CACHE STRING "Mehr Ausgaben" FORCE)

# Relative Pfadangaben verwenden
if(NOT APPLE) # XCode does not work with relative paths.
    # Use relative paths
    set(CMAKE_USE_RELATIVE_PATHS TRUE CACHE STRING "Relative Pfade" FORCE)
endif(NOT APPLE)

SET(CMAKE_BUILD_TYPE Release CACHE STRING "Nur Release" Force)

# Für Visual Studio (ein "multi-target IDE" muss die folgende Variable verändert werden
set(CMAKE_CONFIGURATION_TYPES "Release; Debug" CACHE STRING "Nur Release" FORCE)

# Das Installationsverzeichnis setzen
# Default-Wert: Linux bzw. Cygwin
SET(CMAKE_INSTALL_PREFIX "/usr/local" CACHE PATH "Installationsverzeichnis")

if(NOT APPLE)
	set(LIB_DIR "C:/local/lib" CACHE PATH "Lib Path")
	set(HEADER_DIR "C:/local/include" CACHE PATH "Header Path")
else()
	set(LIB_DIR "/Developer/usr/local/lib" CACHE PATH "Lib Path")
	set(HEADER_DIR "/Developer/usr/local/include" CACHE PATH "Header Path")
endif()

# Pfad zu den Bibliotheken
link_directories(${LIB_DIR})
# Pfad zu den Headerfiles
include_directories(${HEADER_DIR})

# Falls Visual Studio besondere Definitionen benötigt
# definieren wir für g++ unter Cygwin die Opion -mwin32.
# Dann setzt g++ wie Microsoft Visual Studio die
# Präprozessorvariable _WIN32.
if(CYGWIN)
        # Das Installationsverzeichnis setzen
	    # Wir sind auf Windows ...
	    add_definitions(-mwin32)
endif()

# Microsoft Visual Studio dazu bringen cmath wie im Standard zu verwenden
if(MSVC)
        # Das Installationsverzeichnis setzen
	    # Wir sind auf Windows ...
        	SET(CMAKE_INSTALL_PREFIX "C:/local" CACHE PATH "Installationsverzeichnis" FORCE)
        	add_definitions(-D_USE_MATH_DEFINES)
		add_definitions(-D_CRT_SECURE_NO_WARNINGS)      
endif()
